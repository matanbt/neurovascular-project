# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=linear_net_optuna experiment=experiment_lin_net.yaml

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/mse_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 200

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 42
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define range of hyper parameters
    search_space:
#      datamodule.window_len_neuro_back:
#        type: categorical
#        choices: [2, 3, 5]
#      datamodule.window_len_neuro_forward:
#        type: categorical
#        choices: [0, 1, 2, 3]
      model.lr:
        type: float
        low: 0.00001
        high: 0.001
      model.weight_decay:
        type: float
        low: 0
        high: 0.01
      model.num_layers:
        type: categorical
        choices: [2, 3, 4, 5]
      model.hidden_size:
        type: categorical
        choices: [100, 150, 200, 250, 300]
      model.dropout:
        type: float
        low: 0
        high: 0.7

