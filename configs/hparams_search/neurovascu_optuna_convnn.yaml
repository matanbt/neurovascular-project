# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=neurovascu_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/mse_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 500

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 42
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define range of hyper parameters
    search_space:
#      datamodule.batch_size:
#        type: categorical
#        choices: [16, 32, 64]
      datamodule.dataset_object.window_len_neuro_back:
        type: categorical
        choices: [2, 5, 10, 15]
      datamodule.dataset_object.window_len_neuro_forward:
        type: categorical
        choices: [0, 2, 5, 10, 15]
#      model.lr:
#        type: float
#        low: 0.00001
#        high: 0.001
#      model.weight_decay:
#        type: float
#        low: 0
#        high: 0.01
      model.conv_kernel_size:
        type: categorical
        choices: [1, 3, 5]
      model.conv_pool_every:
        type: categorical
        choices: [2, 3, 4]
      model.conv_with_batchnorm:
        type: categorical
        choices: [ True, False ]
      model.conv_dropout:
        type: float
        low: 0
        high: 0.5
      model.conv_filters:
        type: categorical
        choices:
          -  [4, 4, 4, 16, 16, 16]
          -  [4, 4, 32, 32, 64, 64]
          -  [64, 64, 128, 128, 256, 256]
          -  [64, 64, 64, 128, 128, 128, 256, 256, 256]
